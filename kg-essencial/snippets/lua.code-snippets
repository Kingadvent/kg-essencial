{
	"SQL Pegar": {
		"prefix": "vrp_sqlpegar",
		"body": [
		  "vRP.prepare('vRP/get_vrp_king','SELECT * FROM nome_sql WHERE king = @king')"
		],
		"description": "SQL Pegar"
	},
	"SQL Pegar2": {
		"prefix": "vrp_sqlpegar2",
		"body": [
		  "vRP.prepare('vRP/get_vrp_king','SELECT id,king FROM sql_nome WHERE king = @king and deleted = 0')"
		],
		"description": "SQL Pegar2"
	},
	"SQL insert": {
		"prefix": "vrp_sqlinserir",
		"body": [
		  "vRP.prepare(\"vRP/insert_king\",\"INSERT INTO sql_nome(user_id,king) VALUES(@user_id,@king)\")"
		],
		"description": "SQL insert"
	},
	"SQL Update": {
		"prefix": "vrp_sqlupdate",
		"body": [
		  "vRP.prepare(\"vRP/update_king\",\"UPDATE sql_nome SET king = @king, king2 = @king2 WHERE user_id = @user_id and user_kg = @user_kg\")"
		],
		"description": "SQL Update"
	},
	"SQL Delete": {
		"prefix": "vrp_sqldeletar",
		"body": [
		  "vRP.prepare(\"vRP/del_king\",\"DELETE FROM sql_nome WHERE user_id = @user_id AND king = @king\")"
		],
		"description": "SQL Delete"
	},
	"Chat": {
		"prefix": "vrp_chat",
		"body": [
		  "RegisterCommand('$1',function(source,args,rawCommand)",
		  "\tlocal source = source",
		  "\tlocal user_id = vRP.getUserId(source)",
		  "\t\t$2",
		  "end)"
		],
		"description": "Chat"
	},
	"botao pelo chat": {
		"prefix": "vrp_chatbotao",
		"body": [
		  "RegisterKeyMapping(\"$1\",\"$2\",\"keyboard\",\"E$3\")"
		],
		"description": "botao pelo chat"
	},
	"Tunel Server": {
		"prefix": "vrp_tunelserver",
		"body": [
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "-- VRP",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "local Tunnel = module('vrp','lib/Tunnel')",
		  "local Proxy = module('vrp','lib/Proxy')",
		  "vRP = Proxy.getInterface('vRP')",
		  "vRPC = Tunnel.getInterface('vRP')",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "-- CONNECTION",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "cRP = {}",
		  "Tunnel.bindInterface('$1',cRP)",
		  "vCLIENT = Tunnel.getInterface('$2')"
		],
		"description": "Tunel Server"
	},
	"Tunel Client": {
		"prefix": "vrp_tunelclient",
		"body": [
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "-- VRP",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "local Tunnel = module('vrp','lib/Tunnel')",
		  "local Proxy = module('vrp','lib/Proxy')",
		  "vRP = Proxy.getInterface('vRP')",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "-- CONNECTION",
		  "-----------------------------------------------------------------------------------------------------------------------------------------",
		  "cRP = {}",
		  "Tunnel.bindInterface('$1',cRP)",
		  "vSERVER = Tunnel.getInterface('$2')"
		],
		"description": "Tunel Client"
	},
	"Notify Server": {
		"prefix": "vrp_notifyserve",
		"body": [
		  "TriggerClientEvent('Notify',source, 'amarelo$1', '$2',5000)"
		],
		"description": "Notify Server"
	},
	"Notify Client": {
		"prefix": "vrp_notifyclient",
		"body": [
		  "TriggerEvent('Notify', 'amarelo$1', '$2',5000)"
		],
		"description": "Notify Client"
	},
	"Default Time": {
		"prefix": "vrp_timeclient",
		"body": [
		  "Citizen.CreateThread(function()",
		  "\twhile true do",
		  "\t\tlocal idle = 1000",
		  "\t\tlocal ped = PlayerPedId()",
		  "\t\tlocal coords = GetEntityCoords(ped)",
		  "\t\t$2",
		  "\t\tCitizen.Wait(idle)",
		  "\tend",
		  "end)"
		],
		"description": "Default Time Client"
	},
	"Default Time2": {
		"prefix": "vrp_timeclient2",
		"body": [
		  "Citizen.CreateThread(function()",
		  "\twhile true do",
		  "\t\tlocal idle = 1000",
		  "\t\tlocal ped = PlayerPedId()",
		  "\t\tlocal coords = GetEntityCoords(ped)",
		  "\t\tlocal distance = #(coords - vector3($1))",
		  "\t\tif distance <= 2 then",
		  "\t\t\tidle = 5",
		  "\t\t\t$2",
		  "\t\tend",
		  "\t\tCitizen.Wait(idle)",
		  "\tend",
		  "end)"
		],
		"description": "Default Time Client Distancia"
	},
	"Default Time3": {
		"prefix": "vrp_timeclient3",
		"body": [
		  "Citizen.CreateThread(function()",
		  "\twhile true do",
		  "\t\tlocal idle = 1000",
		  "\t\tlocal ped = PlayerPedId()",
		  "\t\tlocal coords = GetEntityCoords(ped)",
		  "\t\tfor k,v in pairs($1) do",
		  "\t\t\tlocal distance = #(coords - vector3(v.x , v.y , v.z))",
		  "\t\t\tif distance <= 2 then",
		  "\t\t\t\tidle = 5",
		  "\t\t\t\t$2",
		  "\t\t\tend",
		  "\t\tend",
		  "\t\tCitizen.Wait(idle)",
		  "\tend",
		  "end)"
		],
		"description": "Default Time Client Distancia for"
	},
	"Ver se esta no carro": {
		"prefix": "vrp_dentrodocarroclient",
		"body": [
		  "IsPedInAnyVehicle(ped)"
		],
		"description": "Ver se esta no carro client"
	},
	"Dynamic Chat": {
		"prefix": "vrp_dynamichat",
		"body": [
		  "exports['dynamic']:AddButton('title$1','desc$2','trigger$3','par$4','id$5','chat$6')"
		],
		"description": "Dynamic Chat"
	},
	"Dynamic Trigger": {
		"prefix": "vrp_dynamictrigger",
		"body": [
		  "exports['dynamic']:AddButton('Desmanche$1','Listagem$2','king:in$3','','others$4',true)"
		],
		"description": "Dynamic Trigger"
	},
	"Dynamic Open": {
		"prefix": "vrp_dynamicopen",
		"body": [
		  "exports['dynamic']:openMenu()"
		],
		"description": "Dynamic Menu"
	},
	"Dynamic Menu": {
		"prefix": "vrp_dynamicmenu",
		"body": [
		  "exports['dynamic']:SubMenu('Title$1','Desc$2','chave$3')"
		],
		"description": "Dynamic Menu"
	},
	"Teleport Client": {
		"prefix": "vrp_teleporteclients",
		"body": [
		  "SetEntityCoords(ped, x,y,z, 0, 0, 0, false)"
		],
		"description": "Teleport Client"
	},
	"hoverFly": {
		"prefix": "vrp_hoverfly",
		"body": [
		  "local innerTable = {}",
		  "for k,v in pairs() do",
		  "\ttable.insert(innerTable,{ x,y,z,2,\"E\",\"Entrar\",\"Pressione para abrir\" })",
		  "end",
		  "TriggerEvent(\"hoverfy:insertTable\",innerTable)"
		],
		"description": "hoverFly"
	},
	  "drawtext3ds": {
		"prefix": "vrp_drawtext3dfunc",
		"body": [
		  "function DrawText3Ds(x,y,z,text)",
		  "\tSetTextFont(4)",
		  "\tSetTextCentre(1)",
		  "\tSetTextEntry('STRING')",
		  "\tSetTextScale(0.35,0.35)",
		  "\tSetTextColour(255,255,255,150)",
		  "\tAddTextComponentString(text)",
		  "\tSetDrawOrigin(x,y,z,0)",
		  "\tDrawText(0.0,0.0)",
		  "\tlocal factor = (string.len(text) / 375) + 0.01",
		  "\tDrawRect(0.0,0.0125,factor,0.03,38,42,56,200)",
		  "\tClearDrawOrigin()",
		  "end"
		],
		"description": "Drawer Text 3d Func"
	},
	"drawtext3d": {
		"prefix": "vrp_drawtext3d",
		"body": [
		  "DrawText3Ds(x,y,z,'~g~E~w~  KING')"
		],
		"description": "drawtext3d"
	},
	"drawTxt Func": {
		"prefix": "vrp_drawtxtfunc",
		"body": [
		  "function drawTxt(text,font,x,y,scale,r,g,b,a)",
		  "\tSetTextFont(font)",
		  "\tSetTextScale(scale,scale)",
		  "\tSetTextColour(r,g,b,a)",
		  "\tSetTextOutline()",
		  "\t--SetTextCentre(1)",
		  "\tSetTextJustification(1)",
		  "\tSetTextEntry('STRING')",
		  "\tAddTextComponentString(text)",
		  "\tDrawText(x,y)",
		  "end"
		],
		"description": "drawTxt Func"
	},
	"drawTxt": {
		"prefix": "vrp_drawtxt",
		"body": [
		  " drawTxt('F7 Para cancelar',4,0.17,0.95,0.30,255,255,255,180)"
		],
		"description": "drawTxt"
	},
	"Register Trigger": {
		"prefix": "vrp_registertrigger",
		"body": [
		  "RegisterNetEvent('king')",
		  "AddEventHandler('king',function(index)",
		  "\t",
		  "end)"
		],
		"description": "Register Trigger"
	},
	"Exports": {
		"prefix": "vrp_exports",
		"body": [
		  "exports('verChaves',chaves)"
		],
		"description": "Exports"
	},
	"CriandoBlipFunc": {
		"prefix": "vrp_criarblipfunc",
		"body": [
		  "function CriandoBlip(x,y,z,blip,cor,tamanho,nome)",
		  "\tblips = AddBlipForCoord(x,y,z)",
		  "\tSetBlipSprite(blips,blip)",
		  "\tSetBlipColour(blips,cor)",
		  "\tSetBlipScale(blips,tamanho)",
		  "\tSetBlipAsShortRange(blips,false)",
		  "\tSetBlipRoute(blips,true)",
		  "\tBeginTextCommandSetBlipName(\"STRING\")",
		  "\tAddTextComponentString(nome)",
		  "\tEndTextCommandSetBlipName(blips)",
		  "end"
		],
		"description": "CriandoBlipFunc"
	},
	"CriandoBlip": {
		"prefix": "vrp_criarblip",
		"body": [
		  "CriandoBlip(x,y,z,blip,cor,0.4,'nome')"
		],
		"description": "CriandoBlip"
	},
	"SpawnNPCFunc": {
		"prefix": "vrp_criarnpcfunc",
		"body": [
		  "function spawnNPC(x,y,z,h)",
		  "\tlocal mHash = GetHashKey(pedHashs[math.random(#pedHashs)])",
		  "\t",
		  "\tRequestModel(mHash)",
		  "\twhile not HasModelLoaded(mHash) do",
		  "\t\tRequestModel(mHash)",
		  "\t\tCitizen.Wait(10)",
		  "\tend",
		  "\t",
		  "\tinPed = CreatePed(4,mHash,x,y,z-1,h,false,false)",
		  "\tFreezeEntityPosition(inPed,true)",
		  "\tSetPedSuffersCriticalHits(inPed,false)",
		  "\tSetBlockingOfNonTemporaryEvents(inPed,true)",
		  "\tSetModelAsNoLongerNeeded(mHash)",
		  "end"
		],
		"description": "SpawnNPCFunc"
	},
	"SpawnNPC": {
		"prefix": "vrp_criarnpc",
		"body": [
		  "spawnNPC(x,y,z,h)"
		],
		"description": "SpawnNPC"
	},
	"User Id e Source": {
		"prefix": "vrp_userid",
		"body": [
		  "local source = source",
		  "local user_id = vRP.getUserId(source)"
		],
		"description": "User Id e Source"
	},
	"vrp SQL Return": {
		"prefix": "vrp_pegarsql",
		"body": [
		  "local SQLReturn = vRP.query('kg/get_kg',{ user_id = user_id })"
		],
		"description": "vrp SQL Return"
	},
	"vrp sql execute": {
		"prefix": "vrp_executesql",
		"body": [
		  "vRP.execute(\"kg/check\", {king = king })"
		],
		"description": "vrp sql execute"
	},
	"vrp pegar id do source": {
		"prefix": "vrp_idsource",
		"body": [
		  "local nuser_id = vRP.getUserId(nplayer)"
		],
		"description": "vrp pegar id do source"
	},
	"pegar identidade": {
		"prefix": "vrp_identidade",
		"body": [
			"local identity = vRP.userIdentity(user_id)"
		],
		"description": "pegar identidade"
	},
	"stop anim server": {
		"prefix": "vrp_stopanims",
		"body": [
			"vRPC.stopAnim(source,false)"
		],
		"description": "stop anim server"
	},
	"stop anim client": {
		"prefix": "vrp_stopanimc",
		"body": [
			"vRP.stopAnim(false)"
		],
		"description": "stop anim client"
	},
	"anim server": {
		"prefix": "vrp_anims",
		"body": [
			"vRPC.playAnim(source,false,{'a','b'},false)"
		],
		"description": "anim server"
	},
	"anim client": {
		"prefix": "vrp_animc",
		"body": [
			"vRP.playAnim(false,{'a','b'},false)"
		],
		"description": "anim client"
	},
	"Pegar player proximo": {
		"prefix": "vrp_pegarproximo",
		"body": [
		  "local otherPlayer = vRPC.nearestPlayer(source)",
		  "if otherPlayer then"
		],
		"description": "Pegar player proximo"
	},
	"Pegar players proximos": {
		"prefix": "vrp_pegarproximos",
		"body": [
			"local players = vRPC.nearestPlayers(source,5)",
			"for k,v in pairs(players) do",
			"  -- v[1] = distancia / v[2] = source / k = id",
			"end"
		],
		"description": "Pegar players proximos"
	},
	"pegar carros": {
		"prefix": "vrp_pegarcarros",
		"body": [
			"local vehicle,vehNet,vehPlate,vehName,vehBlock,vehHealth,vehClass,vehBody,vehEngine = vRPC.vehList(source,10)"
		],
		"description": "pegar carros"
	},
	"perguntar": {
		"prefix": "vrp_pergunta",
		"body": [
			"if vRP.request(source,\"Deseja?\",\"Sim\",\"Não\") then"
		],
		"description": "perguntar"
	},
	"objetos": {
		"prefix": "vrp_objetos",
		"body": [
			"vRPC.createObjects(source,\"mp_safehouselost@\",\"package_dropoff\",\"prop_paper_bag_small\",16,28422,0.0,-0.05,0.05,180.0,0.0,0.0)"
		],
		"description": "objetos"
	},
	"pegar source": {
		"prefix": "vrp_source",
		"body": [
			"vRP.userSource(user_id)"
		],
		"description": "pegar source"
	},
	"verificar permissao": {
		"prefix": "vrp_permissao",
		"body": [
			"vRP.hasPermission(user_id,perm)"
		],
		"description": "verificar permissao"
	},
	"verificar group": {
		"prefix": "vrp_group",
		"body": [
			"vRP.hasGroup(user_id,perm)"
		],
		"description": "verificar group"
	},
	"verificar numero de permissao": {
		"prefix": "vrp_numeropermissao",
		"body": [
			"vRP.numPermission(perm)"
		],
		"description": "verificar numero de permissao"
	},
	"pegar identidade": {
		"prefix": "vrp_identidade",
		"body": [
			"vRP.userIdentity(user_id)"
		],
		"description": "pegar identidade"
	},
	"verificar quantidade item": {
		"prefix": "vrp_amountitem",
		"body": [
			"vRP.getInventoryItemAmount(user_id,nameItem)",
			"vRP.itemAmount(user_id,nameItem)"
		],
		"description": "verificar quantidade item"
	},
	"give item": {
		"prefix": "vrp_giveitem",
		"body": [
			"vRP.giveInventoryItem(user_id,nameItem,amount,notify,slot)",
			"vRP.generateItem(user_id,nameItem,amount,notify,slot)"
		],
		"description": "give item"
	},
	"remove item": {
		"prefix": "vrp_remitem",
		"body": [
			"vRP.tryGetInventoryItem(user_id,nameItem,amount,notify,slot)",
			"vRP.removeInventoryItem(user_id,nameItem,amount,notify)"
		],
		"description": "remove item"
	},
	"check peso": {
		"prefix": "vrp_checkpeso",
		"body": [
			"if (vRP.inventoryWeight(user_id) + (itemWeight(\"item\") * parseInt(2))) <= vRP.getWeight(user_id) then"
		],
		"description": "check peso"
	},
	"getBank": {
		"prefix": "vrp_getbank",
		"body": [
			"vRP.getBank(user_id)"
		],
		"description": "getBank"
	},
	"delBank": {
		"prefix": "vrp_delbank",
		"body": [
			"vRP.delBank(user_id,amount,mode)"
		],
		"description": "delBank"
	},
	"addBank": {
		"prefix": "vrp_addbank",
		"body": [
			"vRP.addBank(user_id,amount,mode)"
		],
		"description": "addBank"
	},
	"pagamento": {
		"prefix": "vrp_pagamento",
		"body": [
			"vRP.paymentFull(user_id,amount)"
		],
		"description": "pagamento"
	},
	"subir barra": {
		"prefix": "vrp_upgrade",
		"body": [
			"vRP.upgradeThirst(user_id,amount)",
			"vRP.upgradeHunger(user_id,amount)",
			"vRP.upgradeStress(user_id,amount)"
		],
		"description": "subir barra"
	},
	"abaixar barra": {
		"prefix": "vrp_downgrade",
		"body": [
			"vRP.downgradeThirst(user_id,amount)",
			"vRP.downgradeHunger(user_id,amount)",
			"vRP.downgradeStress(user_id,amount)"
		],
		"description": "abaixar barra"
	},
	"item list": {
		"prefix": "vrp_itemlist",
		"body": [
			"itemBody(nameItem)",
			"itemIndex(nameItem)",
			"itemName(nameItem)",
			"itemType(nameItem)",
			"itemAmmo(nameItem)",
			"itemVehicle(nameItem)",
			"itemWeight(nameItem)",
			"itemMaxAmount(nameItem)",
			"itemScape(nameItem)",
			"itemDescription(nameItem)",
			"itemDurability(nameItem)",
			"itemCharges(nameItem)"
		],
		"description": "item list"
	},
	"vehicle list": {
		"prefix": "vrp_vehiclelist",
		"body": [
			"vehicleGlobal()",
			"vehicleExist(vname)",
			"vehicleName(vname)",
			"vehicleChest(vname)",
			"vehiclePrice(vname)",
			"vehicleType(vname)",
			"vehicleGems(vname)"
		],
		"description": "vehicle list"
	},
	"Framework S/C": {
		"prefix": "vrp_frameworksc",
		"body": [
			"FR = Framework[Config.Framework]"
		],
		"description": "Framework S/C"
	},
	"Framework function": {
		"prefix": "vrp_frameworkfc",
		"body": [
			"FR[\"$1\"]"
		],
		"description": "Framework function"
	},
	"config": {
		"prefix": "vrp_config",
		"body": [
			"Config = {",
			"    Framework = \"CreativeV3\", -- [[ CreativeV5,CreativeV3,VRPEX ]]",
			"    ",
			"}"
		],
		"description": "config"
	},
	"frameworkconfig": {
		"prefix": "vrp_frameworkconfig",
		"body": [
			"-----------------------------------------------------------------------------------------------------------------------------------------",
			"--	NÃO MECHER -- APENAS MECHER CASO FOR MUITO NECESSARIO --",
			"-----------------------------------------------------------------------------------------------------------------------------------------",
			"local Tunnel = module(\"vrp\",\"lib/Tunnel\")",
			"local Proxy = module(\"vrp\",\"lib/Proxy\")",
			"local vRP = Proxy.getInterface(\"vRP\")",
			"local vRPC = Tunnel.getInterface(\"vRP\")",
			"-----------------------------------------------------------------------------------------------------------------------------------------",
			"--	FRAMEWORK DA BASE --",
			"-----------------------------------------------------------------------------------------------------------------------------------------",
			"Framework = {",
			"    [\"CreativeV5\"] = {",
			"        Passport = vRP.Passport,",
			"        getInventoryItemAmount = vRP.getInventoryItemAmount,",
			"        RemoveItem = vRP.RemoveItem,",
			"        generateItem = vRP.generateItem,",
			"        playAnim = vRPC.playAnim,",
			"        hasPermission = vRP.hasGroup,",
			"        createObjects = vRPC.createObjects,",
			"        removeObjects = vRPC.removeObjects,",
			"        request = vRP.request,",
			"        numPermission = vRP.numPermission,",
			"        playSound = vRPC.playSound,",
			"        itemIndex = itemIndex,",
			"        itemName = itemName,",
			"    },",
			"    [\"CreativeV3\"] = {",
			"        Passport = vRP.getUserId,",
			"        getInventoryItemAmount = vRP.getInventoryItemAmount,",
			"        RemoveItem = vRP.tryGetInventoryItem,",
			"        generateItem = vRP.giveInventoryItem,",
			"        playAnim = vRPC.playAnim,",
			"        hasPermission = vRP.hasPermission,",
			"        createObjects = vRPC.createObjects,",
			"        removeObjects = vRPC.removeObjects,",
			"        request = vRP.request,",
			"        numPermission = vRP.numPermission,",
			"        playSound = vRPC.playSound,",
			"        itemIndex = itemIndex,",
			"        itemName = itemName,",
			"    },",
			"    [\"VRPEX\"] = {",
			"        Passport = vRP.getUserId,",
			"        getInventoryItemAmount = vRP.getInventoryItemAmount,",
			"        RemoveItem = vRP.tryGetInventoryItem,",
			"        generateItem = vRP.giveInventoryItem,",
			"        playAnim = vRPC.playAnim,",
			"        hasPermission = vRP.hasPermission,",
			"        createObjects = vRPC.CarregarObjeto,",
			"        removeObjects = vRPC.DeletarObjeto,",
			"        request = vRP.request,",
			"        numPermission = vRP.numPermission,",
			"        playSound = vRPC.playSound,",
			"        itemIndex = vRP.itemIndex,",
			"        itemName = vRP.itemName,",
			"    },",
			"}"
		],
		"description": "frameworkconfig"
	},
	"comentario": {
		"prefix": "vrp_comentario",
		"body": [
			"-----------------------------------------------------------------------------------------------------------------------------------------",
			"-- $1 --",
			"-----------------------------------------------------------------------------------------------------------------------------------------"
		],
		"description": "comentario"
	},
	"abrirnui": {
		"prefix": "vrp_abrirnui",
		"body": [
			"SetNuiFocus(true,true)",
			"SendNUIMessage({})"
		],
		"description": "abrirnui"
	},
	"fecharnui": {
		"prefix": "vrp_fecharnui",
		"body": [
			"RegisterNUICallback(\"\", function(data,cb)",
			"    SetNuiFocus(false,false)",
			"end)"
		],
		"description": "fecharnui"
	},
	"connect / disconnect": {
		"prefix": "vrp_connectedisconnect",
		"body": [
			"AddEventHandler(\"Connect\",function(user_id,source)",
			"	Connect(user_id,source)",
			"end)",
			"",
			"AddEventHandler(\"Disconnect\",function(user_id)",
			"	Disconnect(user_id)",
			"end)"
		],
		"description": "connect / disconnect"
	},
	"policia": {
		"prefix": "vrp_policia",
		"body": [
			"local policeResult = FR[\"numPermission\"](\"Police\")",
			"    for k,v in pairs(policeResult) do",
			"        async(function()",
			"            FR[\"playSound\"](v,\"ATM_WINDOW\",\"HUD_FRONTEND_DEFAULT_SOUNDSET\")",
			"            TriggerClientEvent(\"NotifyPush\",v,{ code = 20, title = \"Venda de Drogas\", x = coords[\"x\"], y = coords[\"y\"], z = coords[\"z\"], criminal = \"Ligação Anônima\", time = \"Recebido às \"..os.date(\"%H:%M\"), blipColor = 16 })",
			"        end)",
			"    end"
		],
		"description": "policia"
	},
	"verificação script": {
		"prefix": "vrp_verificar",
		"body": [
			"",
			"CreateThread(function()",
			"    local nome = GetCurrentResourceName()",
			"    if nome == \"script\" then",
			"        print(\"[ ^2SCRIPT^0 ] ^1SCRIPT ^4ATUALIZADO^0\")",
			"    else",
			"        print(\"[ ^2SCRIPT^0 ] ^1ERRO PORFAVOR VOLTAR O NOME DA PASTA PARA ^0[^4 script ^0]\")",
			"        StopResource(GetCurrentResourceName())",
			"    end",
			"end)"
		],
		"description": "verificação script"
	},
	"callbackClient Config": {
		"prefix": "callbackclientconfig",
		"body": [
			"KG = {}",
			"KG.ClientCallbacks = {}",
			"KG.ServerCallbacks = {}",
			"",
			"-- Callback Events --",
			"",
			"-- Client Callback",
			"RegisterNetEvent('KG:Client:TriggerClientCallback', function(name, ...)",
			"    KG.TriggerClientCallback(name, function(...)",
			"        TriggerServerEvent('KG:Server:TriggerClientCallback', name, ...)",
			"    end, ...)",
			"end)",
			"",
			"-- Server Callback",
			"RegisterNetEvent('KG:Client:TriggerCallback', function(name, ...)",
			"    if KG.ServerCallbacks[name] then",
			"        KG.ServerCallbacks[name](...)",
			"        KG.ServerCallbacks[name] = nil",
			"    end",
			"end)",
			"",
			"-- Callback Functions --",
			"",
			"-- Client Callback",
			"function KG.CreateClientCallback(name, cb)",
			"    KG.ClientCallbacks[name] = cb",
			"end",
			"",
			"function KG.TriggerClientCallback(name, cb, ...)",
			"    if not KG.ClientCallbacks[name] then return end",
			"    KG.ClientCallbacks[name](cb, ...)",
			"end",
			"",
			"-- Server Callback",
			"function KG.TriggerCallback(name, cb, ...)",
			"    KG.ServerCallbacks[name] = cb",
			"    TriggerServerEvent('KG:Server:TriggerCallback', name, ...)",
			"end"
		],
		"description": "callbackClient Config"
	},
	"callbackServer Config": {
		"prefix": "callbackserverconfig",
		"body": [
			"KG = {}",
			"KG.ClientCallbacks = {}",
			"KG.ServerCallbacks = {}",
			"",
			"-- Callback Events --",
			"",
			"-- Client Callback",
			"RegisterNetEvent('KG:Server:TriggerClientCallback', function(name, ...)",
			"    if KG.ClientCallbacks[name] then",
			"        KG.ClientCallbacks[name](...)",
			"        KG.ClientCallbacks[name] = nil",
			"    end",
			"end)",
			"",
			"-- Server Callback",
			"RegisterNetEvent('KG:Server:TriggerCallback', function(name, ...)",
			"    local src = source",
			"    KG.TriggerCallback(name, src, function(...)",
			"        TriggerClientEvent('KG:Client:TriggerCallback', src, name, ...)",
			"    end, ...)",
			"end)",
			"",
			"-- Callback Functions --",
			"",
			"---Trigger Client Callback",
			"---@param name string",
			"---@param source any",
			"---@param cb function",
			"---@param ... any",
			"function KG.TriggerClientCallback(name, source, cb, ...)",
			"    KG.ClientCallbacks[name] = cb",
			"    TriggerClientEvent('KG:Client:TriggerClientCallback', source, name, ...)",
			"end",
			"",
			"---Create Server Callback",
			"---@param name string",
			"---@param cb function",
			"function KG.CreateCallback(name, cb)",
			"    KG.ServerCallbacks[name] = cb",
			"end",
			"",
			"---Trigger Serv er Callback",
			"---@param name string",
			"---@param source any",
			"---@param cb function",
			"---@param ... any",
			"function KG.TriggerCallback(name, source, cb, ...)",
			"    if not KG.ServerCallbacks[name] then return end",
			"    KG.ServerCallbacks[name](source, cb, ...)",
			"end"
		],
		"description": "callbackServer Config"
	},
	"callbackClient": {
		"prefix": "callbackclient",
		"body": [
			"KG.TriggerCallback('nome', function()",
			"end)"
		],
		"description": "callbackClient"
	},
	"callbackServer": {
		"prefix": "callbackserver",
		"body": [
			"KG.CreateCallback('nome', function(source,cb)",
			"    ",
			"end)"
		],
		"description": "callbackServer"
	},
}